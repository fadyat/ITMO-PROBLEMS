//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Github/ITMO-PROBLEMS/Programming-Technologies/IV semester/Solutions/_2CodeGen/Parser/AntlrParser\Server.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ServerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, PACKAGE=6, IMPORT=7, MODEL_TYPE=8, 
		ACCESS_MODIFIER=9, NON_ACCESS_MODIFIER=10, INHERITANCE_TYPE=11, WS=12, 
		NAME=13, TYPE=14, PATH=15, KEY_VALUE=16, ANNOTATION_HEADER=17, ANNOTATION_ARGS=18, 
		ANY=19;
	public const int
		RULE_package_name = 0, RULE_import_name = 1, RULE_path = 2, RULE_package = 3, 
		RULE_import_ = 4, RULE_annotation_header = 5, RULE_annotation_arguments = 6, 
		RULE_annotation = 7, RULE_modifier = 8, RULE_var_type = 9, RULE_var = 10, 
		RULE_return_type = 11, RULE_model_type = 12, RULE_model_name = 13, RULE_parents = 14, 
		RULE_model_header = 15, RULE_model_attribute = 16, RULE_model_annotation = 17, 
		RULE_model = 18, RULE_function_name = 19, RULE_function_arg = 20, RULE_function_args = 21, 
		RULE_function_header = 22, RULE_function_annotation = 23, RULE_function = 24, 
		RULE_function_body = 25, RULE_root = 26;
	public static readonly string[] ruleNames = {
		"package_name", "import_name", "path", "package", "import_", "annotation_header", 
		"annotation_arguments", "annotation", "modifier", "var_type", "var", "return_type", 
		"model_type", "model_name", "parents", "model_header", "model_attribute", 
		"model_annotation", "model", "function_name", "function_arg", "function_args", 
		"function_header", "function_annotation", "function", "function_body", 
		"root"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'{'", "'}'", "'('", "')'", "'package'", "'import'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "PACKAGE", "IMPORT", "MODEL_TYPE", 
		"ACCESS_MODIFIER", "NON_ACCESS_MODIFIER", "INHERITANCE_TYPE", "WS", "NAME", 
		"TYPE", "PATH", "KEY_VALUE", "ANNOTATION_HEADER", "ANNOTATION_ARGS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Server.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ServerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ServerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ServerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Package_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(ServerParser.PACKAGE, 0); }
		public Package_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_nameContext package_name() {
		Package_nameContext _localctx = new Package_nameContext(Context, State);
		EnterRule(_localctx, 0, RULE_package_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(PACKAGE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(ServerParser.IMPORT, 0); }
		public Import_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_nameContext import_name() {
		Import_nameContext _localctx = new Import_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_import_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(IMPORT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(ServerParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ServerParser.TYPE, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 4, RULE_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << TYPE) | (1L << PATH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Package_nameContext package_name() {
			return GetRuleContext<Package_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public PackageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageContext package() {
		PackageContext _localctx = new PackageContext(Context, State);
		EnterRule(_localctx, 6, RULE_package);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			package_name();
			State = 61;
			path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_nameContext import_name() {
			return GetRuleContext<Import_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public Import_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_Context import_() {
		Import_Context _localctx = new Import_Context(Context, State);
		EnterRule(_localctx, 8, RULE_import_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			import_name();
			State = 64;
			path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATION_HEADER() { return GetToken(ServerParser.ANNOTATION_HEADER, 0); }
		public Annotation_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_headerContext annotation_header() {
		Annotation_headerContext _localctx = new Annotation_headerContext(Context, State);
		EnterRule(_localctx, 10, RULE_annotation_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(ANNOTATION_HEADER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATION_ARGS() { return GetToken(ServerParser.ANNOTATION_ARGS, 0); }
		public Annotation_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_argumentsContext annotation_arguments() {
		Annotation_argumentsContext _localctx = new Annotation_argumentsContext(Context, State);
		EnterRule(_localctx, 12, RULE_annotation_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(ANNOTATION_ARGS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_headerContext annotation_header() {
			return GetRuleContext<Annotation_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_argumentsContext annotation_arguments() {
			return GetRuleContext<Annotation_argumentsContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			annotation_header();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANNOTATION_ARGS) {
				{
				State = 71;
				annotation_arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS_MODIFIER() { return GetToken(ServerParser.ACCESS_MODIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_ACCESS_MODIFIER() { return GetToken(ServerParser.NON_ACCESS_MODIFIER, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				{
				State = 74;
				Match(ACCESS_MODIFIER);
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NON_ACCESS_MODIFIER) {
					{
					State = 75;
					Match(NON_ACCESS_MODIFIER);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NON_ACCESS_MODIFIER) {
					{
					State = 78;
					Match(NON_ACCESS_MODIFIER);
					}
				}

				State = 81;
				Match(ACCESS_MODIFIER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ServerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		public Var_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_typeContext var_type() {
		Var_typeContext _localctx = new Var_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_var_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==TYPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_VALUE() { return GetToken(ServerParser.KEY_VALUE, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 20, RULE_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==KEY_VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ServerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 22, RULE_return_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==TYPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL_TYPE() { return GetToken(ServerParser.MODEL_TYPE, 0); }
		public Model_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_typeContext model_type() {
		Model_typeContext _localctx = new Model_typeContext(Context, State);
		EnterRule(_localctx, 24, RULE_model_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(MODEL_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		public Model_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_nameContext model_name() {
		Model_nameContext _localctx = new Model_nameContext(Context, State);
		EnterRule(_localctx, 26, RULE_model_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITANCE_TYPE() { return GetToken(ServerParser.INHERITANCE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(ServerParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(ServerParser.NAME, i);
		}
		public ParentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentsContext parents() {
		ParentsContext _localctx = new ParentsContext(Context, State);
		EnterRule(_localctx, 28, RULE_parents);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(INHERITANCE_TYPE);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 95;
				Match(NAME);
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 96;
					Match(T__0);
					}
				}

				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_typeContext model_type() {
			return GetRuleContext<Model_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_nameContext model_name() {
			return GetRuleContext<Model_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParentsContext parents() {
			return GetRuleContext<ParentsContext>(0);
		}
		public Model_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_headerContext model_header() {
		Model_headerContext _localctx = new Model_headerContext(Context, State);
		EnterRule(_localctx, 30, RULE_model_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			modifier();
			State = 104;
			model_type();
			State = 105;
			model_name();
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITANCE_TYPE) {
				{
				State = 106;
				parents();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_typeContext var_type() {
			return GetRuleContext<Var_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public Model_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_attributeContext model_attribute() {
		Model_attributeContext _localctx = new Model_attributeContext(Context, State);
		EnterRule(_localctx, 32, RULE_model_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ANNOTATION_HEADER) {
				{
				{
				State = 109;
				annotation();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			modifier();
			State = 116;
			var_type();
			State = 117;
			var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_annotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public Model_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_annotationContext model_annotation() {
		Model_annotationContext _localctx = new Model_annotationContext(Context, State);
		EnterRule(_localctx, 34, RULE_model_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Model_headerContext model_header() {
			return GetRuleContext<Model_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_annotationContext[] model_annotation() {
			return GetRuleContexts<Model_annotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_annotationContext model_annotation(int i) {
			return GetRuleContext<Model_annotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_attributeContext[] model_attribute() {
			return GetRuleContexts<Model_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_attributeContext model_attribute(int i) {
			return GetRuleContext<Model_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelContext model() {
		ModelContext _localctx = new ModelContext(Context, State);
		EnterRule(_localctx, 36, RULE_model);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ANNOTATION_HEADER) {
				{
				{
				State = 121;
				model_annotation();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127;
			model_header();
			State = 128;
			Match(T__1);
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 129;
					model_attribute();
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS_MODIFIER) | (1L << NON_ACCESS_MODIFIER) | (1L << ANNOTATION_HEADER))) != 0)) {
				{
				{
				State = 135;
				function();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 38, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_typeContext var_type() {
			return GetRuleContext<Var_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public Function_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argContext function_arg() {
		Function_argContext _localctx = new Function_argContext(Context, State);
		EnterRule(_localctx, 40, RULE_function_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANNOTATION_HEADER) {
				{
				State = 145;
				annotation();
				}
			}

			State = 148;
			var_type();
			State = 149;
			var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATION_ARGS() { return GetToken(ServerParser.ANNOTATION_ARGS, 0); }
		public Function_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argsContext function_args() {
		Function_argsContext _localctx = new Function_argsContext(Context, State);
		EnterRule(_localctx, 42, RULE_function_args);
		int _la;
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				Match(T__3);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << TYPE) | (1L << ANNOTATION_HEADER))) != 0)) {
					{
					{
					State = 152;
					function_arg();
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__0) {
						{
						State = 153;
						Match(T__0);
						}
					}

					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 161;
				Match(T__4);
				}
				break;
			case ANNOTATION_ARGS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162;
				Match(ANNOTATION_ARGS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argsContext[] function_args() {
			return GetRuleContexts<Function_argsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argsContext function_args(int i) {
			return GetRuleContext<Function_argsContext>(i);
		}
		public Function_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_headerContext function_header() {
		Function_headerContext _localctx = new Function_headerContext(Context, State);
		EnterRule(_localctx, 44, RULE_function_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			modifier();
			State = 166;
			return_type();
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 167;
				function_name();
				}
			}

			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3 || _la==ANNOTATION_ARGS) {
				{
				{
				State = 170;
				function_args();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_annotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public Function_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_annotationContext function_annotation() {
		Function_annotationContext _localctx = new Function_annotationContext(Context, State);
		EnterRule(_localctx, 46, RULE_function_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_annotationContext[] function_annotation() {
			return GetRuleContexts<Function_annotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_annotationContext function_annotation(int i) {
			return GetRuleContext<Function_annotationContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 48, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ANNOTATION_HEADER) {
				{
				{
				State = 178;
				function_annotation();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			function_header();
			State = 185;
			Match(T__1);
			State = 186;
			function_body();
			State = 187;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << PACKAGE) | (1L << IMPORT) | (1L << MODEL_TYPE) | (1L << ACCESS_MODIFIER) | (1L << NON_ACCESS_MODIFIER) | (1L << INHERITANCE_TYPE) | (1L << WS) | (1L << NAME) | (1L << TYPE) | (1L << PATH) | (1L << KEY_VALUE) | (1L << ANNOTATION_HEADER) | (1L << ANNOTATION_ARGS) | (1L << ANY))) != 0)) {
				{
				{
				State = 189;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__2) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ServerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_Context[] import_() {
			return GetRuleContexts<Import_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_Context import_(int i) {
			return GetRuleContext<Import_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageContext[] package() {
			return GetRuleContexts<PackageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageContext package(int i) {
			return GetRuleContext<PackageContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelContext[] model() {
			return GetRuleContexts<ModelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelContext model(int i) {
			return GetRuleContext<ModelContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 52, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PACKAGE) | (1L << IMPORT) | (1L << ACCESS_MODIFIER) | (1L << NON_ACCESS_MODIFIER) | (1L << ANNOTATION_HEADER))) != 0)) {
				{
				State = 198;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IMPORT:
					{
					State = 195;
					import_();
					}
					break;
				case PACKAGE:
					{
					State = 196;
					package();
					}
					break;
				case ACCESS_MODIFIER:
				case NON_ACCESS_MODIFIER:
				case ANNOTATION_HEADER:
					{
					State = 197;
					model();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,19,206,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,1,1,1,1,2,
		1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,3,7,73,8,7,1,8,1,8,
		3,8,77,8,8,1,8,3,8,80,8,8,1,8,3,8,83,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
		12,1,12,1,13,1,13,1,14,1,14,1,14,3,14,98,8,14,4,14,100,8,14,11,14,12,14,
		101,1,15,1,15,1,15,1,15,3,15,108,8,15,1,16,5,16,111,8,16,10,16,12,16,114,
		9,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,5,18,123,8,18,10,18,12,18,126,
		9,18,1,18,1,18,1,18,5,18,131,8,18,10,18,12,18,134,9,18,1,18,5,18,137,8,
		18,10,18,12,18,140,9,18,1,18,1,18,1,19,1,19,1,20,3,20,147,8,20,1,20,1,
		20,1,20,1,21,1,21,1,21,3,21,155,8,21,5,21,157,8,21,10,21,12,21,160,9,21,
		1,21,1,21,3,21,164,8,21,1,22,1,22,1,22,3,22,169,8,22,1,22,5,22,172,8,22,
		10,22,12,22,175,9,22,1,23,1,23,1,24,5,24,180,8,24,10,24,12,24,183,9,24,
		1,24,1,24,1,24,1,24,1,24,1,25,5,25,191,8,25,10,25,12,25,194,9,25,1,26,
		1,26,1,26,5,26,199,8,26,10,26,12,26,202,9,26,1,26,1,26,1,26,0,0,27,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		0,4,1,0,13,15,1,0,13,14,2,0,13,13,16,16,1,0,3,3,200,0,54,1,0,0,0,2,56,
		1,0,0,0,4,58,1,0,0,0,6,60,1,0,0,0,8,63,1,0,0,0,10,66,1,0,0,0,12,68,1,0,
		0,0,14,70,1,0,0,0,16,82,1,0,0,0,18,84,1,0,0,0,20,86,1,0,0,0,22,88,1,0,
		0,0,24,90,1,0,0,0,26,92,1,0,0,0,28,94,1,0,0,0,30,103,1,0,0,0,32,112,1,
		0,0,0,34,119,1,0,0,0,36,124,1,0,0,0,38,143,1,0,0,0,40,146,1,0,0,0,42,163,
		1,0,0,0,44,165,1,0,0,0,46,176,1,0,0,0,48,181,1,0,0,0,50,192,1,0,0,0,52,
		200,1,0,0,0,54,55,5,6,0,0,55,1,1,0,0,0,56,57,5,7,0,0,57,3,1,0,0,0,58,59,
		7,0,0,0,59,5,1,0,0,0,60,61,3,0,0,0,61,62,3,4,2,0,62,7,1,0,0,0,63,64,3,
		2,1,0,64,65,3,4,2,0,65,9,1,0,0,0,66,67,5,17,0,0,67,11,1,0,0,0,68,69,5,
		18,0,0,69,13,1,0,0,0,70,72,3,10,5,0,71,73,3,12,6,0,72,71,1,0,0,0,72,73,
		1,0,0,0,73,15,1,0,0,0,74,76,5,9,0,0,75,77,5,10,0,0,76,75,1,0,0,0,76,77,
		1,0,0,0,77,83,1,0,0,0,78,80,5,10,0,0,79,78,1,0,0,0,79,80,1,0,0,0,80,81,
		1,0,0,0,81,83,5,9,0,0,82,74,1,0,0,0,82,79,1,0,0,0,83,17,1,0,0,0,84,85,
		7,1,0,0,85,19,1,0,0,0,86,87,7,2,0,0,87,21,1,0,0,0,88,89,7,1,0,0,89,23,
		1,0,0,0,90,91,5,8,0,0,91,25,1,0,0,0,92,93,5,13,0,0,93,27,1,0,0,0,94,99,
		5,11,0,0,95,97,5,13,0,0,96,98,5,1,0,0,97,96,1,0,0,0,97,98,1,0,0,0,98,100,
		1,0,0,0,99,95,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,
		29,1,0,0,0,103,104,3,16,8,0,104,105,3,24,12,0,105,107,3,26,13,0,106,108,
		3,28,14,0,107,106,1,0,0,0,107,108,1,0,0,0,108,31,1,0,0,0,109,111,3,14,
		7,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,
		115,1,0,0,0,114,112,1,0,0,0,115,116,3,16,8,0,116,117,3,18,9,0,117,118,
		3,20,10,0,118,33,1,0,0,0,119,120,3,14,7,0,120,35,1,0,0,0,121,123,3,34,
		17,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,
		127,1,0,0,0,126,124,1,0,0,0,127,128,3,30,15,0,128,132,5,2,0,0,129,131,
		3,32,16,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,
		0,0,133,138,1,0,0,0,134,132,1,0,0,0,135,137,3,48,24,0,136,135,1,0,0,0,
		137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,
		1,0,0,0,141,142,5,3,0,0,142,37,1,0,0,0,143,144,5,13,0,0,144,39,1,0,0,0,
		145,147,3,14,7,0,146,145,1,0,0,0,146,147,1,0,0,0,147,148,1,0,0,0,148,149,
		3,18,9,0,149,150,3,20,10,0,150,41,1,0,0,0,151,158,5,4,0,0,152,154,3,40,
		20,0,153,155,5,1,0,0,154,153,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,
		152,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,
		0,0,0,160,158,1,0,0,0,161,164,5,5,0,0,162,164,5,18,0,0,163,151,1,0,0,0,
		163,162,1,0,0,0,164,43,1,0,0,0,165,166,3,16,8,0,166,168,3,22,11,0,167,
		169,3,38,19,0,168,167,1,0,0,0,168,169,1,0,0,0,169,173,1,0,0,0,170,172,
		3,42,21,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,
		0,0,174,45,1,0,0,0,175,173,1,0,0,0,176,177,3,14,7,0,177,47,1,0,0,0,178,
		180,3,46,23,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,
		1,0,0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,185,3,44,22,0,185,186,5,2,
		0,0,186,187,3,50,25,0,187,188,5,3,0,0,188,49,1,0,0,0,189,191,8,3,0,0,190,
		189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,51,1,0,
		0,0,194,192,1,0,0,0,195,199,3,8,4,0,196,199,3,6,3,0,197,199,3,36,18,0,
		198,195,1,0,0,0,198,196,1,0,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,
		1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,5,0,0,
		1,204,53,1,0,0,0,21,72,76,79,82,97,101,107,112,124,132,138,146,154,158,
		163,168,173,181,192,198,200
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
