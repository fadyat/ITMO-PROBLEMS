//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/artyomfadeyev/GitHub/ITMO-PROBLEMS/Programming-Technologies/IV semester/Solutions/_2CodeGen/Parser/AntlrParser/Server.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ServerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, PACKAGE=6, IMPORT=7, MODEL_TYPE=8, 
		ACCESS_MODIFIER=9, NON_ACCESS_MODIFIER=10, INHERITANCE_TYPE=11, WS=12, 
		NAME=13, TYPE=14, PATH=15, KEY_VALUE=16, ANNOTATION_HEADER=17, ANNOTATION_ARGS=18, 
		ANY=19;
	public const int
		RULE_package_name = 0, RULE_import_name = 1, RULE_path = 2, RULE_package = 3, 
		RULE_import_ = 4, RULE_annotation_header = 5, RULE_annotation_arguments = 6, 
		RULE_annotation = 7, RULE_modifier = 8, RULE_var_type = 9, RULE_var = 10, 
		RULE_return_type = 11, RULE_model_type = 12, RULE_model_name = 13, RULE_parents = 14, 
		RULE_model_header = 15, RULE_model_attribute = 16, RULE_model_annotation = 17, 
		RULE_model = 18, RULE_function_name = 19, RULE_function_arg = 20, RULE_function_args = 21, 
		RULE_function_header = 22, RULE_function_annotation = 23, RULE_function = 24, 
		RULE_function_body = 25, RULE_root = 26;
	public static readonly string[] ruleNames = {
		"package_name", "import_name", "path", "package", "import_", "annotation_header", 
		"annotation_arguments", "annotation", "modifier", "var_type", "var", "return_type", 
		"model_type", "model_name", "parents", "model_header", "model_attribute", 
		"model_annotation", "model", "function_name", "function_arg", "function_args", 
		"function_header", "function_annotation", "function", "function_body", 
		"root"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'{'", "'}'", "'('", "')'", "'package'", "'import'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "PACKAGE", "IMPORT", "MODEL_TYPE", 
		"ACCESS_MODIFIER", "NON_ACCESS_MODIFIER", "INHERITANCE_TYPE", "WS", "NAME", 
		"TYPE", "PATH", "KEY_VALUE", "ANNOTATION_HEADER", "ANNOTATION_ARGS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Server.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ServerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ServerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ServerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Package_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(ServerParser.PACKAGE, 0); }
		public Package_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterPackage_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitPackage_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_nameContext package_name() {
		Package_nameContext _localctx = new Package_nameContext(Context, State);
		EnterRule(_localctx, 0, RULE_package_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(PACKAGE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(ServerParser.IMPORT, 0); }
		public Import_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterImport_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitImport_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_nameContext import_name() {
		Import_nameContext _localctx = new Import_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_import_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(IMPORT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(ServerParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ServerParser.TYPE, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 4, RULE_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << TYPE) | (1L << PATH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Package_nameContext package_name() {
			return GetRuleContext<Package_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public PackageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterPackage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitPackage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageContext package() {
		PackageContext _localctx = new PackageContext(Context, State);
		EnterRule(_localctx, 6, RULE_package);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			package_name();
			State = 61;
			path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_nameContext import_name() {
			return GetRuleContext<Import_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public Import_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterImport_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitImport_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_Context import_() {
		Import_Context _localctx = new Import_Context(Context, State);
		EnterRule(_localctx, 8, RULE_import_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			import_name();
			State = 64;
			path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATION_HEADER() { return GetToken(ServerParser.ANNOTATION_HEADER, 0); }
		public Annotation_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterAnnotation_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitAnnotation_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_headerContext annotation_header() {
		Annotation_headerContext _localctx = new Annotation_headerContext(Context, State);
		EnterRule(_localctx, 10, RULE_annotation_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(ANNOTATION_HEADER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotation_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATION_ARGS() { return GetToken(ServerParser.ANNOTATION_ARGS, 0); }
		public Annotation_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterAnnotation_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitAnnotation_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotation_argumentsContext annotation_arguments() {
		Annotation_argumentsContext _localctx = new Annotation_argumentsContext(Context, State);
		EnterRule(_localctx, 12, RULE_annotation_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(ANNOTATION_ARGS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_headerContext annotation_header() {
			return GetRuleContext<Annotation_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Annotation_argumentsContext annotation_arguments() {
			return GetRuleContext<Annotation_argumentsContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			annotation_header();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANNOTATION_ARGS) {
				{
				State = 71;
				annotation_arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS_MODIFIER() { return GetToken(ServerParser.ACCESS_MODIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_ACCESS_MODIFIER() { return GetToken(ServerParser.NON_ACCESS_MODIFIER, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				{
				State = 74;
				Match(ACCESS_MODIFIER);
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NON_ACCESS_MODIFIER) {
					{
					State = 75;
					Match(NON_ACCESS_MODIFIER);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NON_ACCESS_MODIFIER) {
					{
					State = 78;
					Match(NON_ACCESS_MODIFIER);
					}
				}

				State = 81;
				Match(ACCESS_MODIFIER);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ServerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		public Var_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterVar_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitVar_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_typeContext var_type() {
		Var_typeContext _localctx = new Var_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_var_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==TYPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_VALUE() { return GetToken(ServerParser.KEY_VALUE, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 20, RULE_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==KEY_VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(ServerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 22, RULE_return_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_la = TokenStream.LA(1);
			if ( !(_la==NAME || _la==TYPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL_TYPE() { return GetToken(ServerParser.MODEL_TYPE, 0); }
		public Model_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterModel_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitModel_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_typeContext model_type() {
		Model_typeContext _localctx = new Model_typeContext(Context, State);
		EnterRule(_localctx, 24, RULE_model_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(MODEL_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		public Model_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterModel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitModel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_nameContext model_name() {
		Model_nameContext _localctx = new Model_nameContext(Context, State);
		EnterRule(_localctx, 26, RULE_model_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITANCE_TYPE() { return GetToken(ServerParser.INHERITANCE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(ServerParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(ServerParser.NAME, i);
		}
		public ParentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterParents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitParents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentsContext parents() {
		ParentsContext _localctx = new ParentsContext(Context, State);
		EnterRule(_localctx, 28, RULE_parents);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(INHERITANCE_TYPE);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 95;
				Match(NAME);
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 96;
					Match(T__0);
					}
				}

				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_typeContext model_type() {
			return GetRuleContext<Model_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_nameContext model_name() {
			return GetRuleContext<Model_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParentsContext parents() {
			return GetRuleContext<ParentsContext>(0);
		}
		public Model_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterModel_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitModel_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_headerContext model_header() {
		Model_headerContext _localctx = new Model_headerContext(Context, State);
		EnterRule(_localctx, 30, RULE_model_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			modifier();
			State = 104;
			model_type();
			State = 105;
			model_name();
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITANCE_TYPE) {
				{
				State = 106;
				parents();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_typeContext var_type() {
			return GetRuleContext<Var_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public Model_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterModel_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitModel_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_attributeContext model_attribute() {
		Model_attributeContext _localctx = new Model_attributeContext(Context, State);
		EnterRule(_localctx, 32, RULE_model_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ANNOTATION_HEADER) {
				{
				{
				State = 109;
				annotation();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			modifier();
			State = 116;
			var_type();
			State = 117;
			var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_annotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public Model_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterModel_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitModel_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_annotationContext model_annotation() {
		Model_annotationContext _localctx = new Model_annotationContext(Context, State);
		EnterRule(_localctx, 34, RULE_model_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Model_headerContext model_header() {
			return GetRuleContext<Model_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_annotationContext[] model_annotation() {
			return GetRuleContexts<Model_annotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_annotationContext model_annotation(int i) {
			return GetRuleContext<Model_annotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_attributeContext[] model_attribute() {
			return GetRuleContexts<Model_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_attributeContext model_attribute(int i) {
			return GetRuleContext<Model_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelContext model() {
		ModelContext _localctx = new ModelContext(Context, State);
		EnterRule(_localctx, 36, RULE_model);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ANNOTATION_HEADER) {
				{
				{
				State = 121;
				model_annotation();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127;
			model_header();
			State = 128;
			Match(T__1);
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 129;
					model_attribute();
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS_MODIFIER) | (1L << NON_ACCESS_MODIFIER) | (1L << ANNOTATION_HEADER))) != 0)) {
				{
				{
				State = 135;
				function();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ServerParser.NAME, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 38, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_typeContext var_type() {
			return GetRuleContext<Var_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public Function_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterFunction_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitFunction_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argContext function_arg() {
		Function_argContext _localctx = new Function_argContext(Context, State);
		EnterRule(_localctx, 40, RULE_function_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANNOTATION_HEADER) {
				{
				State = 145;
				annotation();
				}
			}

			State = 148;
			var_type();
			State = 149;
			var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATION_ARGS() { return GetToken(ServerParser.ANNOTATION_ARGS, 0); }
		public Function_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterFunction_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitFunction_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argsContext function_args() {
		Function_argsContext _localctx = new Function_argsContext(Context, State);
		EnterRule(_localctx, 42, RULE_function_args);
		int _la;
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				Match(T__3);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << TYPE) | (1L << ANNOTATION_HEADER))) != 0)) {
					{
					{
					State = 152;
					function_arg();
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__0) {
						{
						State = 153;
						Match(T__0);
						}
					}

					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 161;
				Match(T__4);
				}
				break;
			case ANNOTATION_ARGS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162;
				Match(ANNOTATION_ARGS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argsContext[] function_args() {
			return GetRuleContexts<Function_argsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argsContext function_args(int i) {
			return GetRuleContext<Function_argsContext>(i);
		}
		public Function_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterFunction_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitFunction_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_headerContext function_header() {
		Function_headerContext _localctx = new Function_headerContext(Context, State);
		EnterRule(_localctx, 44, RULE_function_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			modifier();
			State = 166;
			return_type();
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 167;
				function_name();
				}
			}

			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3 || _la==ANNOTATION_ARGS) {
				{
				{
				State = 170;
				function_args();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_annotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public Function_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterFunction_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitFunction_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_annotationContext function_annotation() {
		Function_annotationContext _localctx = new Function_annotationContext(Context, State);
		EnterRule(_localctx, 46, RULE_function_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_annotationContext[] function_annotation() {
			return GetRuleContexts<Function_annotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_annotationContext function_annotation(int i) {
			return GetRuleContext<Function_annotationContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 48, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ANNOTATION_HEADER) {
				{
				{
				State = 178;
				function_annotation();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			function_header();
			State = 185;
			Match(T__1);
			State = 186;
			function_body();
			State = 187;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << PACKAGE) | (1L << IMPORT) | (1L << MODEL_TYPE) | (1L << ACCESS_MODIFIER) | (1L << NON_ACCESS_MODIFIER) | (1L << INHERITANCE_TYPE) | (1L << WS) | (1L << NAME) | (1L << TYPE) | (1L << PATH) | (1L << KEY_VALUE) | (1L << ANNOTATION_HEADER) | (1L << ANNOTATION_ARGS) | (1L << ANY))) != 0)) {
				{
				{
				State = 189;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__2) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ServerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_Context[] import_() {
			return GetRuleContexts<Import_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_Context import_(int i) {
			return GetRuleContext<Import_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageContext[] package() {
			return GetRuleContexts<PackageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageContext package(int i) {
			return GetRuleContext<PackageContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelContext[] model() {
			return GetRuleContexts<ModelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelContext model(int i) {
			return GetRuleContext<ModelContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IServerListener typedListener = listener as IServerListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IServerVisitor<TResult> typedVisitor = visitor as IServerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 52, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PACKAGE) | (1L << IMPORT) | (1L << ACCESS_MODIFIER) | (1L << NON_ACCESS_MODIFIER) | (1L << ANNOTATION_HEADER))) != 0)) {
				{
				State = 198;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IMPORT:
					{
					State = 195;
					import_();
					}
					break;
				case PACKAGE:
					{
					State = 196;
					package();
					}
					break;
				case ACCESS_MODIFIER:
				case NON_ACCESS_MODIFIER:
				case ANNOTATION_HEADER:
					{
					State = 197;
					model();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '\xD0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', 'K', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', 'O', '\n', '\n', '\x3', '\n', '\x5', '\n', 'R', '\n', '\n', '\x3', 
		'\n', '\x5', '\n', 'U', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x64', '\n', '\x10', '\x6', '\x10', '\x66', '\n', '\x10', '\r', 
		'\x10', '\xE', '\x10', 'g', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', 'n', '\n', '\x11', '\x3', '\x12', '\a', 
		'\x12', 'q', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 't', '\v', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\a', '\x14', '}', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x80', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\a', '\x14', '\x85', '\n', '\x14', '\f', '\x14', '\xE', '\x14', 
		'\x88', '\v', '\x14', '\x3', '\x14', '\a', '\x14', '\x8B', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\x8E', '\v', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x5', '\x16', '\x95', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x9D', '\n', '\x17', '\a', 
		'\x17', '\x9F', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xA2', '\v', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xA6', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xAB', '\n', 
		'\x18', '\x3', '\x18', '\a', '\x18', '\xAE', '\n', '\x18', '\f', '\x18', 
		'\xE', '\x18', '\xB1', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\a', '\x1A', '\xB6', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', 
		'\xB9', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\a', '\x1B', '\xC1', '\n', '\x1B', 
		'\f', '\x1B', '\xE', '\x1B', '\xC4', '\v', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\a', '\x1C', '\xC9', '\n', '\x1C', '\f', '\x1C', 
		'\xE', '\x1C', '\xCC', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x2', '\x2', '\x1D', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x2', '\x6', 
		'\x3', '\x2', '\xF', '\x11', '\x3', '\x2', '\xF', '\x10', '\x4', '\x2', 
		'\xF', '\xF', '\x12', '\x12', '\x3', '\x2', '\x5', '\x5', '\x2', '\xCA', 
		'\x2', '\x38', '\x3', '\x2', '\x2', '\x2', '\x4', ':', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '<', '\x3', '\x2', '\x2', '\x2', '\b', '>', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x41', '\x3', '\x2', '\x2', '\x2', '\f', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'H', '\x3', '\x2', '\x2', '\x2', '\x12', 'T', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'V', '\x3', '\x2', '\x2', '\x2', '\x16', 'X', '\x3', '\x2', 
		'\x2', '\x2', '\x18', 'Z', '\x3', '\x2', '\x2', '\x2', '\x1A', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '^', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'`', '\x3', '\x2', '\x2', '\x2', ' ', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\"', 'r', '\x3', '\x2', '\x2', '\x2', '$', 'y', '\x3', '\x2', '\x2', 
		'\x2', '&', '~', '\x3', '\x2', '\x2', '\x2', '(', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x94', '\x3', '\x2', '\x2', '\x2', ',', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\x32', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x36', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\b', '\x2', '\x2', '\x39', 
		'\x3', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\t', '\x2', '\x2', 
		';', '\x5', '\x3', '\x2', '\x2', '\x2', '<', '=', '\t', '\x2', '\x2', 
		'\x2', '=', '\a', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x5', '\x2', 
		'\x2', '\x2', '?', '@', '\x5', '\x6', '\x4', '\x2', '@', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x5', '\x4', '\x3', '\x2', '\x42', 
		'\x43', '\x5', '\x6', '\x4', '\x2', '\x43', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\a', '\x13', '\x2', '\x2', '\x45', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\a', '\x14', '\x2', '\x2', 'G', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'J', '\x5', '\f', '\a', '\x2', 'I', 'K', 
		'\x5', '\xE', '\b', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'J', 
		'K', '\x3', '\x2', '\x2', '\x2', 'K', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'L', 'N', '\a', '\v', '\x2', '\x2', 'M', 'O', '\a', '\f', '\x2', '\x2', 
		'N', 'M', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', 'U', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\a', '\f', '\x2', '\x2', 
		'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\a', '\v', '\x2', '\x2', 
		'T', 'L', '\x3', '\x2', '\x2', '\x2', 'T', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'U', '\x13', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\t', '\x3', '\x2', 
		'\x2', 'W', '\x15', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\t', '\x4', 
		'\x2', '\x2', 'Y', '\x17', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\t', 
		'\x3', '\x2', '\x2', '[', '\x19', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\a', '\n', '\x2', '\x2', ']', '\x1B', '\x3', '\x2', '\x2', '\x2', '^', 
		'_', '\a', '\xF', '\x2', '\x2', '_', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x65', '\a', '\r', '\x2', '\x2', '\x61', '\x63', '\a', '\xF', '\x2', 
		'\x2', '\x62', '\x64', '\a', '\x3', '\x2', '\x2', '\x63', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x65', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\x5', '\x12', '\n', '\x2', 'j', 'k', '\x5', 
		'\x1A', '\xE', '\x2', 'k', 'm', '\x5', '\x1C', '\xF', '\x2', 'l', 'n', 
		'\x5', '\x1E', '\x10', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'm', 
		'n', '\x3', '\x2', '\x2', '\x2', 'n', '!', '\x3', '\x2', '\x2', '\x2', 
		'o', 'q', '\x5', '\x10', '\t', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x3', '\x2', '\x2', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', '\x12', '\n', '\x2', 
		'v', 'w', '\x5', '\x14', '\v', '\x2', 'w', 'x', '\x5', '\x16', '\f', '\x2', 
		'x', '#', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x5', '\x10', '\t', '\x2', 
		'z', '%', '\x3', '\x2', '\x2', '\x2', '{', '}', '\x5', '$', '\x13', '\x2', 
		'|', '{', '\x3', '\x2', '\x2', '\x2', '}', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x81', '\x3', '\x2', '\x2', '\x2', '\x80', '~', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x5', ' ', '\x11', '\x2', 
		'\x82', '\x86', '\a', '\x4', '\x2', '\x2', '\x83', '\x85', '\x5', '\"', 
		'\x12', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8B', 
		'\x5', '\x32', '\x1A', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x90', '\a', '\x5', '\x2', '\x2', '\x90', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x92', '\a', '\xF', '\x2', '\x2', '\x92', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x95', '\x5', '\x10', '\t', '\x2', 
		'\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', 
		'\x5', '\x14', '\v', '\x2', '\x97', '\x98', '\x5', '\x16', '\f', '\x2', 
		'\x98', '+', '\x3', '\x2', '\x2', '\x2', '\x99', '\xA0', '\a', '\x6', 
		'\x2', '\x2', '\x9A', '\x9C', '\x5', '*', '\x16', '\x2', '\x9B', '\x9D', 
		'\a', '\x3', '\x2', '\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', 
		'\a', '\a', '\x2', '\x2', '\xA4', '\xA6', '\a', '\x14', '\x2', '\x2', 
		'\xA5', '\x99', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '-', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', 
		'\x5', '\x12', '\n', '\x2', '\xA8', '\xAA', '\x5', '\x18', '\r', '\x2', 
		'\xA9', '\xAB', '\x5', '(', '\x15', '\x2', '\xAA', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAE', '\x5', ',', '\x17', '\x2', 
		'\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '/', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x10', '\t', 
		'\x2', '\xB3', '\x31', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', '\x5', 
		'\x30', '\x19', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBB', '\x5', '.', '\x18', '\x2', '\xBB', '\xBC', '\a', '\x4', '\x2', 
		'\x2', '\xBC', '\xBD', '\x5', '\x34', '\x1B', '\x2', '\xBD', '\xBE', '\a', 
		'\x5', '\x2', '\x2', '\xBE', '\x33', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC1', '\n', '\x5', '\x2', '\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC9', '\x5', '\n', '\x6', '\x2', '\xC6', '\xC9', '\x5', 
		'\b', '\x5', '\x2', '\xC7', '\xC9', '\x5', '&', '\x14', '\x2', '\xC8', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', 
		'\x2', '\x2', '\x3', '\xCE', '\x37', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'J', 'N', 'Q', 'T', '\x63', 'g', 'm', 'r', '~', '\x86', '\x8C', '\x94', 
		'\x9C', '\xA0', '\xA5', '\xAA', '\xAF', '\xB7', '\xC2', '\xC8', '\xCA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
